open Uints

include Instruction_types

module RST_offset = struct
  let x00 = 0x00 |> Uint16.of_int
  let x08 = 0x08 |> Uint16.of_int
  let x10 = 0x10 |> Uint16.of_int
  let x18 = 0x18 |> Uint16.of_int
  let x20 = 0x20 |> Uint16.of_int
  let x28 = 0x28 |> Uint16.of_int
  let x30 = 0x30 |> Uint16.of_int
  let x38 = 0x38 |> Uint16.of_int
end

module Bit_pos = struct
  let b0 = 0 |> Uint8.of_int
  let b1 = 1 |> Uint8.of_int
  let b2 = 2 |> Uint8.of_int
  let b3 = 3 |> Uint8.of_int
  let b4 = 4 |> Uint8.of_int
  let b5 = 5 |> Uint8.of_int
  let b6 = 6 |> Uint8.of_int
  let b7 = 7 |> Uint8.of_int
end

module Instruction_length = struct
  let l1 = 1 |> Uint16.of_int
  let l2 = 2 |> Uint16.of_int
  let l3 = 3 |> Uint16.of_int
end

let fetch_and_decode mmu ~pc =
  let open Instruction_length in
  let next_byte () = Mmu.read_byte mmu Uint16.(succ pc) in
  let next_word () = Mmu.read_word mmu Uint16.(succ pc) in
  let op = Mmu.read_byte mmu pc |> Uint8.to_int in
  match op with
  | 0x00 -> l1, NOP
  | 0x01 -> l3, LD16 (RR BC, Immediate (next_word ()))
  | 0x02 -> l1, LD (RR_indirect BC, R A)
  | 0x03 -> l1, INC16 (RR BC)
  | 0x04 -> l1, INC (R B)
  | 0x05 -> l1, DEC (R B)
  | 0x06 -> l2, LD (R B, Immediate (next_byte ()))
  | 0x07 -> l1, RLCA
  | 0x08 -> l3, LD16 (Direct (next_word ()), SP)
  | 0x09 -> l1, ADD16 (RR HL, RR BC)
  | 0x0A -> l1, LD (R A, RR_indirect BC)
  | 0x0B -> l1, DEC16 (RR BC)
  | 0x0C -> l1, INC (R C)
  | 0x0D -> l1, DEC (R C)
  | 0x0E -> l2, LD (R C, Immediate (next_byte ()))
  | 0x0F -> l1, RRCA
  | 0x10 -> ignore(next_byte ()); l2, STOP
  | 0x11 -> l3, LD16 (RR DE, Immediate (next_word ()))
  | 0x12 -> l1, LD (RR_indirect DE, R A)
  | 0x13 -> l1, INC16 (RR DE)
  | 0x14 -> l1, INC (R D)
  | 0x15 -> l1, DEC (R D)
  | 0x16 -> l2, LD (R D, Immediate (next_byte ()))
  | 0x17 -> l1, RLA
  | 0x18 -> l2, JR (None, (next_byte ()))
  | 0x19 -> l1, ADD16 (RR HL, RR DE)
  | 0x1A -> l1, LD (R A, RR_indirect DE)
  | 0x1B -> l1, DEC16 (RR DE)
  | 0x1C -> l1, INC (R E)
  | 0x1D -> l1, DEC (R E)
  | 0x1E -> l2, LD (R E, Immediate (next_byte ()))
  | 0x1F -> l1, RRA
  | 0x20 -> l2, JR (NZ, next_byte ())
  | 0x21 -> l3, LD16 (RR HL, Immediate (next_word ()))
  | 0x22 -> l1, LD (HL_inc, R A)
  | 0x23 -> l1, INC16 (RR HL)
  | 0x24 -> l1, INC (R H)
  | 0x25 -> l1, DEC (R H)
  | 0x26 -> l2, LD (R H, Immediate (next_byte ()))
  | 0x27 -> l1, DAA
  | 0x28 -> l2, JR (Z, next_byte ())
  | 0x29 -> l1, ADD16 (RR HL,RR HL)
  | 0x2A -> l1, LD (R A, HL_inc)
  | 0x2B -> l1, DEC16 (RR HL)
  | 0x2C -> l1, INC (R L)
  | 0x2D -> l1, DEC (R L)
  | 0x2E -> l2, LD (R L, Immediate (next_byte ()))
  | 0x2F -> l1, CPL
  | 0x30 -> l2, JR (NC, next_byte ())
  | 0x31 -> l3, LD16 (SP, Immediate (next_word ()))
  | 0x32 -> l1, LD (HL_dec, R A)
  | 0x33 -> l1, INC16 SP
  | 0x34 -> l1, INC (RR_indirect HL)
  | 0x35 -> l1, DEC (RR_indirect HL)
  | 0x36 -> l2, LD (RR_indirect HL, Immediate (next_byte ()))
  | 0x37 -> l1, SCF
  | 0x38 -> l2, JR (C, next_byte ())
  | 0x39 -> l1, ADD16 (RR HL, SP)
  | 0x3A -> l1, LD (R A, HL_dec)
  | 0x3B -> l1, DEC16 SP
  | 0x3C -> l1, INC (R A)
  | 0x3D -> l1, DEC (R A)
  | 0x3E -> l2, LD (R A, Immediate (next_byte ()))
  | 0x3F -> l1, CCF
  | 0x40 -> l1, LD (R B, R B)
  | 0x41 -> l1, LD (R B, R C)
  | 0x42 -> l1, LD (R B, R D)
  | 0x43 -> l1, LD (R B, R E)
  | 0x44 -> l1, LD (R B, R H)
  | 0x45 -> l1, LD (R B, R F)
  | 0x46 -> l1, LD (R B, RR_indirect HL)
  | 0x47 -> l1, LD (R B, R A)
  | 0x48 -> l1, LD (R C, R B)
  | 0x49 -> l1, LD (R C, R C)
  | 0x4A -> l1, LD (R C, R D)
  | 0x4B -> l1, LD (R C, R E)
  | 0x4C -> l1, LD (R C, R H)
  | 0x4D -> l1, LD (R C, R L)
  | 0x4E -> l1, LD (R C, RR_indirect HL)
  | 0x4F -> l1, LD (R C, R A)
  | 0x50 -> l1, LD (R D, R B)
  | 0x51 -> l1, LD (R D, R C)
  | 0x52 -> l1, LD (R D, R D)
  | 0x53 -> l1, LD (R D, R E)
  | 0x54 -> l1, LD (R D, R H)
  | 0x55 -> l1, LD (R D, R L)
  | 0x56 -> l1, LD (R D, RR_indirect HL)
  | 0x57 -> l1, LD (R D, R A)
  | 0x58 -> l1, LD (R E, R B)
  | 0x59 -> l1, LD (R E, R C)
  | 0x5A -> l1, LD (R E, R D)
  | 0x5B -> l1, LD (R E, R E)
  | 0x5C -> l1, LD (R E, R H)
  | 0x5D -> l1, LD (R E, R L)
  | 0x5E -> l1, LD (R E, RR_indirect HL)
  | 0x5F -> l1, LD (R E, R A)
  | 0x60 -> l1, LD (R H, R B)
  | 0x61 -> l1, LD (R H, R C)
  | 0x62 -> l1, LD (R H, R D)
  | 0x63 -> l1, LD (R H, R E)
  | 0x64 -> l1, LD (R H, R H)
  | 0x65 -> l1, LD (R H, R L)
  | 0x66 -> l1, LD (R H, RR_indirect HL)
  | 0x67 -> l1, LD (R H, R A)
  | 0x68 -> l1, LD (R L, R B)
  | 0x69 -> l1, LD (R L, R C)
  | 0x6A -> l1, LD (R L, R D)
  | 0x6B -> l1, LD (R L, R E)
  | 0x6C -> l1, LD (R L, R H)
  | 0x6D -> l1, LD (R L, R L)
  | 0x6E -> l1, LD (R L, R E)
  | 0x6F -> l1, LD (R L, R A)
  | 0x70 -> l1, LD (RR_indirect HL, R B)
  | 0x71 -> l1, LD (RR_indirect HL, R C)
  | 0x72 -> l1, LD (RR_indirect HL, R D)
  | 0x73 -> l1, LD (RR_indirect HL, R E)
  | 0x74 -> l1, LD (RR_indirect HL, R H)
  | 0x75 -> l1, LD (RR_indirect HL, R L)
  | 0x76 -> l1, HALT
  | 0x77 -> l1, LD (RR_indirect HL, R A)
  | 0x78 -> l1, LD (R A, R B)
  | 0x79 -> l1, LD (R A, R C)
  | 0x7A -> l1, LD (R A, R D)
  | 0x7B -> l1, LD (R A, R E)
  | 0x7C -> l1, LD (R A, R H)
  | 0x7D -> l1, LD (R A, R L)
  | 0x7E -> l1, LD (R A, RR_indirect HL)
  | 0x7F -> l1, LD (R A, R A)
  | 0x80 -> l1, ADD (R A, R B)
  | 0x81 -> l1, ADD (R A, R C)
  | 0x82 -> l1, ADD (R A, R D)
  | 0x83 -> l1, ADD (R A, R E)
  | 0x84 -> l1, ADD (R A, R H)
  | 0x85 -> l1, ADD (R A, R L)
  | 0x86 -> l1, ADD (R A, RR_indirect HL)
  | 0x87 -> l1, ADD (R A, (R A))
  | 0x88 -> l1, ADC (R A, R B)
  | 0x89 -> l1, ADC (R A, R C)
  | 0x8A -> l1, ADC (R A, R D)
  | 0x8B -> l1, ADC (R A, R E)
  | 0x8C -> l1, ADC (R A, R H)
  | 0x8D -> l1, ADC (R A, R L)
  | 0x8E -> l1, ADC (R A, RR_indirect HL)
  | 0x8F -> l1, ADC (R A, R A)
  | 0x90 -> l1, SUB (R A, R B)
  | 0x91 -> l1, SUB (R A, R C)
  | 0x92 -> l1, SUB (R A, R D)
  | 0x93 -> l1, SUB (R A, R E)
  | 0x94 -> l1, SUB (R A, R H)
  | 0x95 -> l1, SUB (R A, R L)
  | 0x96 -> l1, SUB (R A, RR_indirect HL)
  | 0x97 -> l1, SUB (R A, R A)
  | 0x98 -> l1, SBC (R A, R B)
  | 0x99 -> l1, SBC (R A, R C)
  | 0x9A -> l1, SBC (R A, R D)
  | 0x9B -> l1, SBC (R A, R E)
  | 0x9C -> l1, SBC (R A, R H)
  | 0x9D -> l1, SBC (R A, R L)
  | 0x9E -> l1, SBC (R A, RR_indirect HL)
  | 0x9F -> l1, SBC (R A, R A)
  | 0xA0 -> l1, AND (R A, R B)
  | 0xA1 -> l1, AND (R A, R C)
  | 0xA2 -> l1, AND (R A, R D)
  | 0xA3 -> l1, AND (R A, R E)
  | 0xA4 -> l1, AND (R A, R H)
  | 0xA5 -> l1, AND (R A, R L)
  | 0xA6 -> l1, AND (R A, RR_indirect HL)
  | 0xA7 -> l1, AND (R A, R A)
  | 0xA8 -> l1, XOR (R A, R B)
  | 0xA9 -> l1, XOR (R A, R C)
  | 0xAA -> l1, XOR (R A, R D)
  | 0xAB -> l1, XOR (R A, R E)
  | 0xAC -> l1, XOR (R A, R H)
  | 0xAD -> l1, XOR (R A, R L)
  | 0xAE -> l1, XOR (R A, RR_indirect HL)
  | 0xAF -> l1, XOR (R A, R A)
  | 0xB0 -> l1, OR (R A, R B)
  | 0xB1 -> l1, OR (R A, R C)
  | 0xB2 -> l1, OR (R A, R D)
  | 0xB3 -> l1, OR (R A, R E)
  | 0xB4 -> l1, OR (R A, R H)
  | 0xB5 -> l1, OR (R A, R L)
  | 0xB6 -> l1, OR (R A, RR_indirect HL)
  | 0xB7 -> l1, OR (R A, R A)
  | 0xB8 -> l1, CP (R A, R B)
  | 0xB9 -> l1, CP (R A, R C)
  | 0xBA -> l1, CP (R A, R D)
  | 0xBB -> l1, CP (R A, R E)
  | 0xBC -> l1, CP (R A, R H)
  | 0xBD -> l1, CP (R A, R L)
  | 0xBE -> l1, CP (R A, RR_indirect HL)
  | 0xBF -> l1, CP (R A, R A)
  | 0xC0 -> l1, RET NZ
  | 0xC1 -> l1, POP BC
  | 0xC2 -> l3, JP (NZ, Immediate (next_word ()))
  | 0xC3 -> l3, JP (None, Immediate (next_word ()))
  | 0xC4 -> l3, CALL (NZ, next_word ())
  | 0xC5 -> l1, PUSH BC
  | 0xC6 -> l2, ADD (R A, (Immediate (next_byte ())))
  | 0xC7 -> l1, RST RST_offset.x00
  | 0xC8 -> l1, RET Z
  | 0xC9 -> l1, RET None
  | 0xCA -> l3, JP (Z, Immediate  (next_word ()))
  | 0xCC -> l3, CALL (Z, next_word ())
  | 0xCD -> l3, CALL (None, next_word ())
  | 0xCE -> l2, ADC (R A, Immediate (next_byte ()))
  | 0xCF -> l1, RST RST_offset.x08
  | 0xD0 -> l1, RET NC
  | 0xD1 -> l1, POP DE
  | 0xD2 -> l3, JP (NC, Immediate (next_word ()))
  | 0xD3 -> l1, NOP
  | 0xD4 -> l3, CALL (NC, next_word ())
  | 0xD5 -> l1, PUSH DE
  | 0xD6 -> l2, SUB (R A, Immediate (next_byte ()))
  | 0xD7 -> l1, RST RST_offset.x10
  | 0xD8 -> l1, RET C
  | 0xD9 -> l1, RETI
  | 0xDA -> l3, JP (C, Immediate (next_word ()))
  | 0xDB -> l1, NOP
  | 0xDC -> l3, CALL (C, next_word ())
  | 0xDD -> l1, NOP
  | 0xDE -> l2, SBC (R A, Immediate (next_byte ()))
  | 0xDF -> l1, RST RST_offset.x18
  | 0xE0 -> l2, LD (FF00_offset (next_byte ()), R A)
  | 0xE1 -> l1, POP HL
  | 0xE2 -> l1, LD (FF00_C, R A)
  | 0xE3 -> l1, NOP
  | 0xE4 -> l1, NOP
  | 0xE5 -> l1, PUSH HL
  | 0xE6 -> l2, AND (R A, Immediate (next_byte ()))
  | 0xE7 -> l1, RST RST_offset.x20
  | 0xE8 -> l2, ADD16 (SP, Immediate8 (next_byte ()))
  | 0xE9 -> l1, JP (None, RR HL)
  | 0xEA -> l3, LD (Direct (next_word ()), R A)
  | 0xEB -> l1, NOP
  | 0xEC -> l1, NOP
  | 0xED -> l1, NOP
  | 0xEE -> l2, XOR (R A, Immediate (next_byte ()))
  | 0xEF -> l1, RST RST_offset.x28
  | 0xF0 -> l2, LD (R A, FF00_offset (next_byte ()))
  | 0xF1 -> l1, POP AF
  | 0xF2 -> l1, LD (R A, FF00_C)
  | 0xF3 -> l1, DI
  | 0xF4 -> l1, NOP
  | 0xF5 -> l1, PUSH AF
  | 0xF6 -> l2, OR (R A, Immediate (next_byte ()))
  | 0xF7 -> l1, RST RST_offset.x30
  | 0xF8 -> l2, LD16 (RR HL, SP_offset (next_byte ()))
  | 0xF9 -> l1, LD16 (SP, RR HL)
  | 0xFA -> l3, LD (R A, Direct (next_word ()))
  | 0xFB -> l1, EI
  | 0xFC -> l1, NOP
  | 0xFD -> l1, NOP
  | 0xFE -> l2, CP (R A, Immediate (next_byte ()))
  | 0xFF -> l1, RST RST_offset.x38
  | 0xCB -> l2, (
      let op = next_byte () |> Uint8.to_int in
      match op with
      | 0x00 -> RLC (R B)
      | 0x01 -> RLC (R C)
      | 0x02 -> RLC (R D)
      | 0x03 -> RLC (R E)
      | 0x04 -> RLC (R H)
      | 0x05 -> RLC (R L)
      | 0x06 -> RLC (RR_indirect HL)
      | 0x07 -> RRC (R A)
      | 0x08 -> RRC (R B)
      | 0x09 -> RRC (R C)
      | 0x0A -> RRC (R D)
      | 0x0B -> RRC (R E)
      | 0x0C -> RRC (R H)
      | 0x0D -> RRC (R L)
      | 0x0E -> RRC (RR_indirect HL)
      | 0x0F -> RRC (R A)
      | 0x10 -> RL (R B)
      | 0x11 -> RL (R C)
      | 0x12 -> RL (R D)
      | 0x13 -> RL (R E)
      | 0x14 -> RL (R H)
      | 0x15 -> RL (R L)
      | 0x16 -> RL (RR_indirect HL)
      | 0x17 -> RR (R A)
      | 0x18 -> RR (R B)
      | 0x19 -> RR (R C)
      | 0x1A -> RR (R D)
      | 0x1B -> RR (R E)
      | 0x1C -> RR (R H)
      | 0x1D -> RR (R L)
      | 0x1E -> RR (RR_indirect HL)
      | 0x1F -> RR (R A)
      | 0x20 -> SLA (R B)
      | 0x21 -> SLA (R C)
      | 0x22 -> SLA (R D)
      | 0x23 -> SLA (R E)
      | 0x24 -> SLA (R H)
      | 0x25 -> SLA (R L)
      | 0x26 -> SLA (RR_indirect HL)
      | 0x27 -> SRA (R A)
      | 0x28 -> SRA (R B)
      | 0x29 -> SRA (R C)
      | 0x2A -> SRA (R D)
      | 0x2B -> SRA (R E)
      | 0x2C -> SRA (R H)
      | 0x2D -> SRA (R L)
      | 0x2E -> SRA (RR_indirect HL)
      | 0x2F -> SRA (R A)
      | 0x30 -> SWAP (R B)
      | 0x31 -> SWAP (R C)
      | 0x32 -> SWAP (R D)
      | 0x33 -> SWAP (R E)
      | 0x34 -> SWAP (R H)
      | 0x35 -> SWAP (R L)
      | 0x36 -> SWAP (RR_indirect HL)
      | 0x37 -> SRL (R A)
      | 0x38 -> SRL (R B)
      | 0x39 -> SRL (R C)
      | 0x3A -> SRL (R D)
      | 0x3B -> SRL (R E)
      | 0x3C -> SRL (R H)
      | 0x3D -> SRL (R L)
      | 0x3E -> SRL (RR_indirect HL)
      | 0x3F -> SRL (R A)
      | 0x40 -> BIT (Bit_pos.b0, R B)
      | 0x41 -> BIT (Bit_pos.b0, R C)
      | 0x42 -> BIT (Bit_pos.b0, R D)
      | 0x43 -> BIT (Bit_pos.b0, R E)
      | 0x44 -> BIT (Bit_pos.b0, R H)
      | 0x45 -> BIT (Bit_pos.b0, R L)
      | 0x46 -> BIT (Bit_pos.b0, RR_indirect HL)
      | 0x47 -> BIT (Bit_pos.b1, R A)
      | 0x48 -> BIT (Bit_pos.b1, R B)
      | 0x49 -> BIT (Bit_pos.b1, R C)
      | 0x4A -> BIT (Bit_pos.b1, R D)
      | 0x4B -> BIT (Bit_pos.b1, R E)
      | 0x4C -> BIT (Bit_pos.b1, R H)
      | 0x4D -> BIT (Bit_pos.b1, R L)
      | 0x4E -> BIT (Bit_pos.b1, RR_indirect HL)
      | 0x4F -> BIT (Bit_pos.b1, R A)
      | 0x50 -> BIT (Bit_pos.b2, R B)
      | 0x51 -> BIT (Bit_pos.b2, R C)
      | 0x52 -> BIT (Bit_pos.b2, R D)
      | 0x53 -> BIT (Bit_pos.b2, R E)
      | 0x54 -> BIT (Bit_pos.b2, R H)
      | 0x55 -> BIT (Bit_pos.b2, R L)
      | 0x56 -> BIT (Bit_pos.b2, RR_indirect HL)
      | 0x57 -> BIT (Bit_pos.b3, R A)
      | 0x58 -> BIT (Bit_pos.b3, R B)
      | 0x59 -> BIT (Bit_pos.b3, R C)
      | 0x5A -> BIT (Bit_pos.b3, R D)
      | 0x5B -> BIT (Bit_pos.b3, R E)
      | 0x5C -> BIT (Bit_pos.b3, R H)
      | 0x5D -> BIT (Bit_pos.b3, R L)
      | 0x5E -> BIT (Bit_pos.b3, RR_indirect HL)
      | 0x5F -> BIT (Bit_pos.b3, R A)
      | 0x60 -> BIT (Bit_pos.b4, R B)
      | 0x61 -> BIT (Bit_pos.b4, R C)
      | 0x62 -> BIT (Bit_pos.b4, R D)
      | 0x63 -> BIT (Bit_pos.b4, R E)
      | 0x64 -> BIT (Bit_pos.b4, R H)
      | 0x65 -> BIT (Bit_pos.b4, R L)
      | 0x66 -> BIT (Bit_pos.b4, RR_indirect HL)
      | 0x67 -> BIT (Bit_pos.b5, R A)
      | 0x68 -> BIT (Bit_pos.b5, R B)
      | 0x69 -> BIT (Bit_pos.b5, R C)
      | 0x6A -> BIT (Bit_pos.b5, R D)
      | 0x6B -> BIT (Bit_pos.b5, R E)
      | 0x6C -> BIT (Bit_pos.b5, R H)
      | 0x6D -> BIT (Bit_pos.b5, R L)
      | 0x6E -> BIT (Bit_pos.b5, RR_indirect HL)
      | 0x6F -> BIT (Bit_pos.b5, R A)
      | 0x70 -> BIT (Bit_pos.b6, R B)
      | 0x71 -> BIT (Bit_pos.b6, R C)
      | 0x72 -> BIT (Bit_pos.b6, R D)
      | 0x73 -> BIT (Bit_pos.b6, R E)
      | 0x74 -> BIT (Bit_pos.b6, R H)
      | 0x75 -> BIT (Bit_pos.b6, R L)
      | 0x76 -> BIT (Bit_pos.b6, RR_indirect HL)
      | 0x77 -> BIT (Bit_pos.b7, R A)
      | 0x78 -> BIT (Bit_pos.b7, R B)
      | 0x79 -> BIT (Bit_pos.b7, R C)
      | 0x7A -> BIT (Bit_pos.b7, R D)
      | 0x7B -> BIT (Bit_pos.b7, R E)
      | 0x7C -> BIT (Bit_pos.b7, R H)
      | 0x7D -> BIT (Bit_pos.b7, R L)
      | 0x7E -> BIT (Bit_pos.b7, RR_indirect HL)
      | 0x7F -> BIT (Bit_pos.b7, R A)
      | 0x80 -> RES (Bit_pos.b0, R B)
      | 0x81 -> RES (Bit_pos.b0, R C)
      | 0x82 -> RES (Bit_pos.b0, R D)
      | 0x83 -> RES (Bit_pos.b0, R E)
      | 0x84 -> RES (Bit_pos.b0, R H)
      | 0x85 -> RES (Bit_pos.b0, R L)
      | 0x86 -> RES (Bit_pos.b0, RR_indirect HL)
      | 0x87 -> RES (Uint8.one, R A)
      | 0x88 -> RES (Uint8.one, R B)
      | 0x89 -> RES (Uint8.one, R C)
      | 0x8A -> RES (Uint8.one, R D)
      | 0x8B -> RES (Uint8.one, R E)
      | 0x8C -> RES (Uint8.one, R H)
      | 0x8D -> RES (Uint8.one, R L)
      | 0x8E -> RES (Uint8.one, RR_indirect HL)
      | 0x8F -> RES (Uint8.one, R A)
      | 0x90 -> RES (Bit_pos.b2, R B)
      | 0x91 -> RES (Bit_pos.b2, R C)
      | 0x92 -> RES (Bit_pos.b2, R D)
      | 0x93 -> RES (Bit_pos.b2, R E)
      | 0x94 -> RES (Bit_pos.b2, R H)
      | 0x95 -> RES (Bit_pos.b2, R L)
      | 0x96 -> RES (Bit_pos.b2, RR_indirect HL)
      | 0x97 -> RES (Bit_pos.b3, R A)
      | 0x98 -> RES (Bit_pos.b3, R B)
      | 0x99 -> RES (Bit_pos.b3, R C)
      | 0x9A -> RES (Bit_pos.b3, R D)
      | 0x9B -> RES (Bit_pos.b3, R E)
      | 0x9C -> RES (Bit_pos.b3, R H)
      | 0x9D -> RES (Bit_pos.b3, R L)
      | 0x9E -> RES (Bit_pos.b3, RR_indirect HL)
      | 0x9F -> RES (Bit_pos.b3, R A)
      | 0xA0 -> RES (Bit_pos.b4, R B)
      | 0xA1 -> RES (Bit_pos.b4, R C)
      | 0xA2 -> RES (Bit_pos.b4, R D)
      | 0xA3 -> RES (Bit_pos.b4, R E)
      | 0xA4 -> RES (Bit_pos.b4, R H)
      | 0xA5 -> RES (Bit_pos.b4, R L)
      | 0xA6 -> RES (Bit_pos.b4, RR_indirect HL)
      | 0xA7 -> RES (Bit_pos.b5, R A)
      | 0xA8 -> RES (Bit_pos.b5, R B)
      | 0xA9 -> RES (Bit_pos.b5, R C)
      | 0xAA -> RES (Bit_pos.b5, R D)
      | 0xAB -> RES (Bit_pos.b5, R E)
      | 0xAC -> RES (Bit_pos.b5, R H)
      | 0xAD -> RES (Bit_pos.b5, R L)
      | 0xAE -> RES (Bit_pos.b5, RR_indirect HL)
      | 0xAF -> RES (Bit_pos.b5, R A)
      | 0xB0 -> RES (Bit_pos.b6, R B)
      | 0xB1 -> RES (Bit_pos.b6, R C)
      | 0xB2 -> RES (Bit_pos.b6, R D)
      | 0xB3 -> RES (Bit_pos.b6, R E)
      | 0xB4 -> RES (Bit_pos.b6, R H)
      | 0xB5 -> RES (Bit_pos.b6, R L)
      | 0xB6 -> RES (Bit_pos.b6, RR_indirect HL)
      | 0xB7 -> RES (Bit_pos.b7, R A)
      | 0xB8 -> RES (Bit_pos.b7, R B)
      | 0xB9 -> RES (Bit_pos.b7, R C)
      | 0xBA -> RES (Bit_pos.b7, R D)
      | 0xBB -> RES (Bit_pos.b7, R E)
      | 0xBC -> RES (Bit_pos.b7, R H)
      | 0xBD -> RES (Bit_pos.b7, R L)
      | 0xBE -> RES (Bit_pos.b7, RR_indirect HL)
      | 0xBF -> RES (Bit_pos.b7, R A)
      | 0xC0 -> SET (Bit_pos.b0, R B)
      | 0xC1 -> SET (Bit_pos.b0, R C)
      | 0xC2 -> SET (Bit_pos.b0, R D)
      | 0xC3 -> SET (Bit_pos.b0, R E)
      | 0xC4 -> SET (Bit_pos.b0, R H)
      | 0xC5 -> SET (Bit_pos.b0, R L)
      | 0xC6 -> SET (Bit_pos.b0, RR_indirect HL)
      | 0xC7 -> SET (Bit_pos.b1, R A)
      | 0xC8 -> SET (Bit_pos.b1, R B)
      | 0xC9 -> SET (Bit_pos.b1, R C)
      | 0xCA -> SET (Bit_pos.b1, R D)
      | 0xCB -> SET (Bit_pos.b1, R E)
      | 0xCC -> SET (Bit_pos.b1, R H)
      | 0xCD -> SET (Bit_pos.b1, R L)
      | 0xCE -> SET (Bit_pos.b1, RR_indirect HL)
      | 0xCF -> SET (Bit_pos.b1, R A)
      | 0xD0 -> SET (Bit_pos.b2, R B)
      | 0xD1 -> SET (Bit_pos.b2, R C)
      | 0xD2 -> SET (Bit_pos.b2, R D)
      | 0xD3 -> SET (Bit_pos.b2, R E)
      | 0xD4 -> SET (Bit_pos.b2, R H)
      | 0xD5 -> SET (Bit_pos.b2, R L)
      | 0xD6 -> SET (Bit_pos.b2, RR_indirect HL)
      | 0xD7 -> SET (Bit_pos.b3, R A)
      | 0xD8 -> SET (Bit_pos.b3, R B)
      | 0xD9 -> SET (Bit_pos.b3, R C)
      | 0xDA -> SET (Bit_pos.b3, R D)
      | 0xDB -> SET (Bit_pos.b3, R E)
      | 0xDC -> SET (Bit_pos.b3, R H)
      | 0xDD -> SET (Bit_pos.b3, R L)
      | 0xDE -> SET (Bit_pos.b3, RR_indirect HL)
      | 0xDF -> SET (Bit_pos.b3, R A)
      | 0xE0 -> SET (Bit_pos.b4, R B)
      | 0xE1 -> SET (Bit_pos.b4, R C)
      | 0xE2 -> SET (Bit_pos.b4, R D)
      | 0xE3 -> SET (Bit_pos.b4, R E)
      | 0xE4 -> SET (Bit_pos.b4, R H)
      | 0xE5 -> SET (Bit_pos.b4, R L)
      | 0xE6 -> SET (Bit_pos.b4, RR_indirect HL)
      | 0xE7 -> SET (Bit_pos.b5, R A)
      | 0xE8 -> SET (Bit_pos.b5, R B)
      | 0xE9 -> SET (Bit_pos.b5, R C)
      | 0xEA -> SET (Bit_pos.b5, R D)
      | 0xEB -> SET (Bit_pos.b5, R E)
      | 0xEC -> SET (Bit_pos.b5, R H)
      | 0xED -> SET (Bit_pos.b5, R L)
      | 0xEE -> SET (Bit_pos.b5, RR_indirect HL)
      | 0xEF -> SET (Bit_pos.b5, R A)
      | 0xF0 -> SET (Bit_pos.b6, R B)
      | 0xF1 -> SET (Bit_pos.b6, R C)
      | 0xF2 -> SET (Bit_pos.b6, R D)
      | 0xF3 -> SET (Bit_pos.b6, R E)
      | 0xF4 -> SET (Bit_pos.b6, R H)
      | 0xF5 -> SET (Bit_pos.b6, R L)
      | 0xF6 -> SET (Bit_pos.b6, RR_indirect HL)
      | 0xF7 -> SET (Bit_pos.b7, R A)
      | 0xF8 -> SET (Bit_pos.b7, R B)
      | 0xF9 -> SET (Bit_pos.b7, R C)
      | 0xFA -> SET (Bit_pos.b7, R D)
      | 0xFB -> SET (Bit_pos.b7, R E)
      | 0xFC -> SET (Bit_pos.b7, R H)
      | 0xFD -> SET (Bit_pos.b7, R L)
      | 0xFE -> SET (Bit_pos.b7, RR_indirect HL)
      | 0xFF -> SET (Bit_pos.b7, R A)
      | _ -> failwith (Printf.sprintf "Unrecognized opcode after 0xCB: 0x%02x" op)
    )
  | _ -> failwith (Printf.sprintf "Unrecognized opcode: 0x%02x" op)
